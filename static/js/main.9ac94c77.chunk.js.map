{"version":3,"sources":["Navigation.js","PagePrincipale.js","Login.js","App.tsx","serviceWorker.js","index.js","chat.jpg"],"names":["Navigation","props","class","type","placeholder","aria-label","Component","PagePrincipale","state","like","likes","setState","className","src","chat","alt","onClick","this","Login","login","Logged","Accueil","App","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"qOA2BeA,G,uDArBX,WAAYC,GAAQ,uCACVA,G,qDAMN,OACI,6BACI,yBAAKC,MAAM,wDACP,uBAAGA,MAAM,gBAAT,aACC,0BAAMA,MAAM,eACR,2BAAOA,MAAM,uBAAuBC,KAAK,SAASC,YAAY,SAASC,aAAW,WACnF,4BAAQH,MAAM,uCAAuCC,KAAK,UAA1D,iB,GAfCG,c,gBCoCVC,E,kDAlCX,WAAYN,GAAQ,IAAD,8BACf,cAAMA,IAIVO,MAAQ,CACJC,KAAM,GANS,EASnBC,MAAQ,WACJ,EAAKC,SAAS,CAEVF,KAAM,EAAKD,MAAMC,KAAO,KAZb,E,qDAoBf,OACI,6BACK,yBAAKG,UAAU,OACX,yBAAKC,IAAKC,IAAMC,IAAI,UAEvB,yBAAKH,UAAU,QACf,4BAAQT,KAAK,SAASD,MAAM,6BAA6Bc,QAASC,KAAKP,OAAvE,UAAsFO,KAAKT,MAAMC,Y,GA5BtFH,aC0EdY,E,kDAtEX,WAAYjB,GAAQ,IAAD,8BACf,cAAMA,IAGVO,MAAQ,CACJW,MAAO,GALQ,EAQnBC,OAAO,WACH,EAAKT,SAAS,CACVQ,MAAM,KAVK,EAgBnBE,QAAQ,WACJ,OAAyB,IAArB,EAAKb,MAAMW,MAGH,6BACA,yBAAKjB,MAAM,WACN,yBAAKA,MAAM,mBACV,yCACC,6BACA,uEAGR,yBAAKA,MAAM,QACJ,yBAAKA,MAAM,sBACN,yBAAKA,MAAM,cACN,8BACG,yBAAKA,MAAM,cACP,4CACA,2BAAOC,KAAK,OAAOD,MAAM,eAAeE,YAAY,eAErD,yBAAKF,MAAM,cACV,2CACA,2BAAOC,KAAK,WAAWD,MAAM,eAAeE,YAAY,cAE7D,4BAAQD,KAAK,SAASD,MAAM,gBAAgBc,QAAS,EAAKI,QAA1D,SACA,4BAAQjB,KAAK,SAASD,MAAM,qBAA5B,iBASD,IAArB,EAAKM,MAAMW,MAER,kBAAC,EAAD,WAFP,GAlDW,E,qDA2Df,OACI,6BACCF,KAAKI,e,GA/DEf,aCwBLgB,E,kDAvBX,WAAYrB,GAAgB,uCAClBA,G,qDAQN,OAGA,6BAEI,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAjBMsB,IAAMjB,WCOJkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,sCEzI5BC,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.9ac94c77.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nclass Navigation extends Component {\n\n    constructor(props) {\n        super(props)\n    }\n\n\n    render() {\n\n        return (\n            <div>\n                <nav class=\"navbar navbar-light bg-light justify-content-between\">\n                    <a class=\"navbar-brand\">StoryPage</a>\n                     <form class=\"form-inline\">\n                         <input class=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"></input>\n                        <button class=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Search</button>\n                        </form>\n                        </nav>\n            </div>\n        )\n    }\n}\n\nexport default Navigation;\n","import React, {Component} from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport chat from'./chat.jpg';\r\n\r\nclass PagePrincipale extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n\r\n\r\n    state = {\r\n        like: 3\r\n    }\r\n\r\n    likes = () => {\r\n        this.setState({\r\n           \r\n            like: this.state.like + 1\r\n            \r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                 <div className=\"mef\">\r\n                     <img src={chat} alt=\"chat\" />\r\n                  </div >\r\n                  <div className=\"like\">\r\n                  <button type=\"button\" class=\"btn btn-danger btn-rounded\" onClick={this.likes}>Like   {this.state.like}</button>\r\n                  \r\n                 </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PagePrincipale;","import React, {Component} from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport PagePrincipale from './PagePrincipale'\r\n\r\n\r\nclass Login extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n\r\n    state = {\r\n        login: 0\r\n    }\r\n\r\n    Logged=() => {\r\n        this.setState({\r\n            login:1\r\n        })\r\n    }\r\n    \r\n \r\n    \r\n    Accueil=() => {\r\n        if (this.state.login === 0) {\r\n            return (\r\n                \r\n                    <div>\r\n                    <div class=\"sidenav\">\r\n                         <div class=\"login-main-text\">\r\n                          <h2>StoryPage</h2> \r\n                           <br/>\r\n                           <p>Login or register from here to access.</p>\r\n                        </div>\r\n                   </div>\r\n                   <div class=\"main\">\r\n                          <div class=\"col-md-6 col-sm-12\">\r\n                               <div class=\"login-form\">\r\n                                    <form>\r\n                                       <div class=\"form-group\">\r\n                                           <label>User Name</label>\r\n                                           <input type=\"text\" class=\"form-control\" placeholder=\"User Name\"></input>\r\n                                      </div>\r\n                                          <div class=\"form-group\">\r\n                                           <label>Password</label>\r\n                                           <input type=\"password\" class=\"form-control\" placeholder=\"Password\"></input>\r\n                                          </div>\r\n                                      <button type=\"submit\" class=\"btn btn-black\" onClick={this.Logged}>Login</button>\r\n                                      <button type=\"submit\" class=\"btn btn-secondary\">Register</button>\r\n                                    </form>\r\n                              </div>\r\n                         </div>\r\n                    </div>\r\n                  </div>\r\n            )\r\n\r\n        }else{\r\n            if (this.state.login === 1) {\r\n                return (\r\n                  (<PagePrincipale/>))\r\n                }\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return(\r\n            <div>\r\n            {this.Accueil()}\r\n            </div>\r\n\r\n        \r\n        \r\n        )\r\n    }\r\n}\r\n\r\nexport default Login;","import React, {Component} from 'react';\nimport './index.css';\nimport Navigation from './Navigation';\nimport Login from './Login';\n\nclass App extends React.Component<{},any> {\n\n    constructor(props: number) {\n        super(props);\n    \n    }\n\n\n    render () {\n\n\n        return(\n       \n           \n        <div >\n            \n            <Navigation/>  \n            <Login/>         \n        </div>\n\n        \n        );\n}\n}\n \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.tsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/chat.990e132c.jpg\";"],"sourceRoot":""}